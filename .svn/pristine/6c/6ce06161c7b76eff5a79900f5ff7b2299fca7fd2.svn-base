<?php
// +----------------------------------------------------------------------
// | 时品
// +----------------------------------------------------------------------
// | Copyright (c) 2014 http://m.shipinmmm.com/ All rights reserved.
// +----------------------------------------------------------------------
// | 这不是一个自由软件，未经授权，不允许任何个人或组织传播和使用。
// +----------------------------------------------------------------------
// | Author: Chris.Ying <christhink@qq.com>
// +----------------------------------------------------------------------
// | @version: $Id$ 


/**
 *  团购管理
 * Class GroupBuyingAction
 */
class GroupBuyingAction extends CommonAction{

    /**
     *  所有团购
     */
    public function index(){
        $where = '';

        $id = I('id');
        if($id){
            $where['id'] = array('eq',$id);
        }

        $groupBuyingM = new GroupbuyingModel();
        $count = $groupBuyingM->where($where)->count();
        $page = new Page($count);
        $strPage = $page->show();
        $list = $groupBuyingM->where($where)->relation(true)
            ->limit($page->firstRow . ',' . $page->listRows)->order("groupbuying_begintime desc")->select();
        if(!empty($list)){
            $userM = M('user');
            $groupBuyingConf = C('GROUP_BUYING');
            foreach($list as $key => $item){
                $list[$key]['condition_type'] = $groupBuyingConf['condition_type'][$item['condition_type']];
                $list[$key]['state'] = $groupBuyingConf['groupbuying_state'][$item['state']];

                if(!empty($item['user_head'])){
                    $list[$key]['user_head'] = unserialize($item['user_head']);
                }

                if(!empty($item['partake'])){
                    $userIds = implode(',', json_decode($item['partake'], true));
                    $userList = $userM->where('id IN (' . $userIds . ')')->select();
                    $list[$key]['partake_list'] = $userList;
                }

                $list[$key]['groupbuying_begintime'] = date('y-m-d H:i:s', $item['groupbuying_begintime']);
                $list[$key]['groupbuying_endtime'] = date('y-m-d H:i:s', $item['groupbuying_endtime']);
                $list[$key]['create_time'] = date('y-m-d H:i:s', $item['create_time']);
            }
        }

        $this->assign('list', $list);
        $this->assign('page', $strPage);
        $this->display();
    }

    /**
     *  查询指定开团日期和状态的团购
     */
    public function getgroupbuy_condition(){
        // dump($_POST);
        $opentime_begin = strtotime(I('limit_date_From',0).' '.I('limit_time_From',0));
        $opentime_end = strtotime(I('limit_date_To',0).' '.I('limit_time_To',0));
        // dump($opentime_end);exit;
        // $opentime_begin = I('opentime_begin', 0);
        // $opentime_end = I('opentime_end', 0);
        $groupbuystate = I('groupbuystate', 0);
        $timetype = I('timetype', 0);
        $where = '';

        if($opentime_begin != 0)
        {
            if($timetype == 0)
            {
                $where = $where."create_time>=".$opentime_begin." AND create_time<=".$opentime_end;
            }
            else
            {
                $where = $where."groupbuying_endtime>=".$opentime_begin." AND groupbuying_endtime<=".$opentime_end;
            }

        }

        if($groupbuystate != 0)
        {
            if(!empty($where))
                $where = $where." AND state =".$groupbuystate;
            else
                $where = "state =".$groupbuystate;
        }
        $groupBuyingM = new GroupbuyingModel();
        $count = $groupBuyingM->where($where)->count();
        $page = new Page($count);
        $strPage = $page->show();
        $list = $groupBuyingM->where($where)->relation(true)
            ->limit($page->firstRow . ',' . $page->listRows)->order("create_time desc")->select();
            // echo $groupBuyingM->getLastSql();
        if(!empty($list)){
            $userM = M('user');
            $groupBuyingConf = C('GROUP_BUYING');
            foreach($list as $key => $item){
                $list[$key]['condition_type'] = $groupBuyingConf['condition_type'][$item['condition_type']];
                $list[$key]['state'] = $groupBuyingConf['groupbuying_state'][$item['state']];

                if(!empty($item['user_head'])){
                    $list[$key]['user_head'] = unserialize($item['user_head']);
                }

                if(!empty($item['partake'])){
                    $userIds = implode(',', json_decode($item['partake'], true));
                    $userList = $userM->where('id IN (' . $userIds . ')')->select();
                    $list[$key]['partake_list'] = $userList;
                }

                $list[$key]['groupbuying_begintime'] = date('y-m-d H:i:s', $item['groupbuying_begintime']);
                $list[$key]['groupbuying_endtime'] = date('y-m-d H:i:s', $item['groupbuying_endtime']);
                $list[$key]['create_time'] = date('y-m-d H:i:s', $item['create_time']);
                $list[$key]['groupbuying_endtime'] = date('y-m-d H:i:s', $item['groupbuying_endtime']);
            }
        }

        if($opentime_begin == 0)
        {

        }
        else
        {
            $datebegin=date('Y-m-d',$opentime_begin);
            $dateend=date('Y-m-d',$opentime_end);

            $choosetime = $datebegin." - ".$dateend;
            $this->assign('choosetime',$choosetime);
        }


        $this->assign('post',$_POST);
        $this->assign('timetype',$timetype);
        $this->assign('groupbuystate',$groupbuystate);
        $this->assign('list', $list);
        $this->assign('page', $strPage);
        $this->display("index");
    }

    public function joinindex()
    {
        $opentime_begin = strtotime(I('limit_date_From',0).' '.I('limit_time_From',0));
        $opentime_end = strtotime(I('limit_date_To',0).' '.I('limit_time_To',0));
        //$nowdate=time();
        // $opentime_begin = I('opentime_begin', 0);
        // $opentime_end = I('opentime_end', 0);
        $groupbuystate = 1;//进行中
        $timetype = I('timetype', 0);
        $where = '';

        if($opentime_begin != 0)
        {
            if($timetype == 0)
            {
                $where = $where."create_time>=".$opentime_begin." AND create_time<=".$opentime_end;
            }
            else
            {
                $where = $where."groupbuying_endtime>=".$opentime_begin." AND groupbuying_endtime<=".$opentime_end;
            }

        }

        if($groupbuystate != 0)
        {
            if(!empty($where))
                $where = $where." AND state =".$groupbuystate;
            else
                $where = "state =".$groupbuystate;
        }

        $groupBuyingM = new GroupbuyingModel();
        $count = $groupBuyingM->where($where)->count();
        $page = new Page($count);
        $strPage = $page->show();
        $list = $groupBuyingM->where($where)->relation(true)
            ->limit($page->firstRow . ',' . $page->listRows)->order("id desc")->select();


        if(!empty($list)){
            $userM = M('user');
            $groupBuyingConf = C('GROUP_BUYING');
            foreach($list as $key => $item){
                $list[$key]['condition_type'] = $groupBuyingConf['condition_type'][$item['condition_type']];
                $list[$key]['state'] = $groupBuyingConf['groupbuying_state'][$item['state']];

                if(!empty($item['user_head'])){
                    $list[$key]['user_head'] = unserialize($item['user_head']);
                }

                if(!empty($item['partake'])){
                    $userIds = implode(',', json_decode($item['partake'], true));
                    $userList = $userM->where('id IN (' . $userIds . ')')->select();
                    $list[$key]['partake_list'] = $userList;
                }

                $list[$key]['groupbuying_begintime'] = date('y-m-d H:i:s', $item['groupbuying_begintime']);
                $list[$key]['groupbuying_endtime'] = date('y-m-d H:i:s', $item['groupbuying_endtime']);
                $list[$key]['create_time'] = date('y-m-d H:i:s', $item['create_time']);
            }
        }

        if($opentime_begin == 0)
        {

        }
        else
        {
            $datebegin=date('Y-m-d',$opentime_begin);
            $dateend=date('Y-m-d',$opentime_end);

            $choosetime = $datebegin." - ".$dateend;
            $this->assign('choosetime',$choosetime);
        }


        $this->assign('timetype',$timetype);
        $this->assign('groupbuystate',$groupbuystate);
        $this->assign('list', $list);
        $this->assign('page', $strPage);
        $this->display("joinindex");
    }
    public function pingtuan()
    {
        $id = I('id', 0);
        $where = 'id='.$id;
        $groupBuyingM = new GroupbuyingModel();
        $list = $groupBuyingM->where($where)->select();
        $this->assign('item', $list[0]);
        $this->display("joinedit");
    }

    public function addjoinnum()
    {
        $id = I('id', 0);
        if($id == 0) {
            echo '更新失败';
            return;
        }

        $addnum = I('addnum', 0);

        $where = 'id<10000';//机器人

        $groupBuyingM = new GroupbuyingModel();
        $userM = M('user');
        $count = $userM->where($where)->count();

        if($count<$addnum)
        {
            echo '更新失败';
            return;
        }

        $randuseridarray=array();
        $maxiduser = $userM->where('id<10000')->order('id desc')->limit(0 . ',' . 1)->select();
        $findcount=0;
        for($inum=0;$inum<$addnum;$inum++)
        {
            $ranid = rand(1,$maxiduser[0]['id']);

            if(in_array($ranid,$randuseridarray))
            {
                $inum--;//随机的id有错，再随机一次；
                continue;
            }

            $whereid = 'id='.$ranid;
            //先查询用户

            $userlist = $userM->where($whereid)->select();
            if(empty($userlist))
            {
                $findcount = $findcount+1;
                if($findcount>999)
                {
                    //找了1000次都没找到一个用户，继续下一个
                }
                else
                {
                    $inum--;//随机的id有错，再随机一次；
                }
            }
            else
            {
                $findcount = 0;

                $randuseridarray[]=$ranid;

                $wheregroupbuy='id='.$id;
                $groupbuylist = $groupBuyingM->where($wheregroupbuy)->select();

                $nownum = $groupbuylist[0]['groupbuying_nownums'] + 1;
                if($nownum < $groupbuylist[0]['groupbuying_reqnums'])//至少留一个空位置，如果没有真实用户进来，这个团就不管了。
                {
                    $partake = json_decode($groupbuylist[0]['partake']);

                    if(!in_array($userlist[0]['id'],$partake))
                    {
                        array_push($partake,$userlist[0]['id']);//插入元素

                        $data = array();
                        $data['groupbuying_nownums']= $nownum;
                        $data['partake']=json_encode($partake);

                        $res = $groupBuyingM->where($wheregroupbuy)->save($data);
                        if ($res > 0)
                            echo $userlist[0]['id'].'加团成功';
                        else
                            echo $userlist[0]['id'].'加团失败';
                    }

                }

            }
        }

    }

    public function choujiangindex()
    {
        $this->display("choujiangindex");
    }

    public function savechoujiang()
    {
        $focus_luckdraw_winning_no = I('focus_luckdraw_winning_no', '');
        $focus_luckdraw_winning_groupbuyinsts = I('focus_luckdraw_winning_groupbuyinsts', '');

        if(strlen($focus_luckdraw_winning_no)==0 || strlen($focus_luckdraw_winning_groupbuyinsts)==0)
        {
            echo '数据不能为空';
            return;
        }


        $focus_luckdraw_winning_groupbuyinst_array = explode(",",$focus_luckdraw_winning_groupbuyinsts);
        if(!empty($focus_luckdraw_winning_groupbuyinst_array))
        { 
            $collect_groupbuy_inst_ids = array();
            foreach($focus_luckdraw_winning_groupbuyinst_array as $groupbuy_inst_id)
            {
                if(!empty($groupbuy_inst_id))
                {
                    $collect_groupbuy_inst_ids[] = $groupbuy_inst_id;
                }
            }

            //保存中奖结果
            $data = array();
            $data['focus_luckdraw_winning_no'] =  $focus_luckdraw_winning_no;
            $data['is_focus_luckdraw_winning'] = 1;

            $groupBuyingM = new GroupbuyingModel();
            $where = array();
            $where['id'] = array('in', $collect_groupbuy_inst_ids);
            $groupBuyingM->where($where)->save($data);

            //修改中奖者的订单状态
            $groupbuyinst_list = $groupBuyingM->where($where)->select($data);
            $need_change_order_data = array();
            //找到用户uid
            foreach($groupbuyinst_list as $groupbuy_inst_key=>$groupbuy_inst)
            {
                $partake_array = json_decode($groupbuy_inst['partake'],true);
                if(empty($partake_array))
                {
                    continue;
                }
                foreach($partake_array as $partakekey=>$uid)
                {
                    if($focus_luckdraw_winning_no == $partakekey)
                    {
                        $need_change_order_data[] = array(
                            'groupbuy_inst_id'=>$groupbuy_inst['id'],
                            'uid'=>$uid,
                        );
                    }
                }


            }
            //修改订单数据
            $groubuyorderM = M('groupbuying_order');
            $orderM = M('order');
            foreach($need_change_order_data as $ncod_key=>$ncod_value)
            {
                $groupbuyorder_where = array(
                    'uid'=>$ncod_value['uid'],
                    'groupbuying_id'=>$ncod_value['groupbuy_inst_id'],
                    'state'=>2,
                );
                $groupbuy_order_list = $groubuyorderM->where($groupbuyorder_where)->select();
                if(!empty($groupbuy_order_list))
                {
                    //修改数据
                    $groupbuy_order = $groupbuy_order_list[0];


                    $order_where=array(
                        'order_name'=>$groupbuy_order['order_name'],
                    );
                    $data_order=array();
                    $data_order['operation_id'] = 10;
                    $orderM->where($order_where)->save($data_order);

                    /*$groupbuy_order_where=array(
                        'id'=>$groupbuy_order['id'],
                    );
                    $data_groupbuy_order=array();
                    $data_groupbuy_order['state']=5;
                    $groubuyorderM->where($groupbuy_order_where)->save($data_groupbuy_order);*/
                }
            }


        }

        echo '提交成功';

    }

    /*
     * 导入中奖名单EXCL表格
     * */
    public function importLuck(){
        $savePath = $_SERVER['DOCUMENT_ROOT'] . '/upload/';
        $fileFix = explode('.', $_FILES['import_file']['name']);
        $fileName = md5($_FILES['import_file']['name'] . time()) . '.' . $fileFix[1];
        $uploadFile = $savePath . $fileName;
        move_uploaded_file($_FILES['import_file']['tmp_name'], $uploadFile);
        $result = $this->importExecl($uploadFile);
//        dump($result);exit;

        if(!empty($result['data'])){
            foreach($result['data'] as $key=>$val){
                if($key>1){
                    $focus_luckdraw_winning_groupbuyinsts[] = $val['B'];
                    $focus_luckdraw_winning_no = $val['C'];
                }
            }
        }


//                    dump($focus_luckdraw_winning_groupbuyinsts);
//                    dump($focus_luckdraw_winning_no);
                    if(strlen($focus_luckdraw_winning_no)==0 || count($focus_luckdraw_winning_groupbuyinsts)==0)
                    {
                        echo '数据不能为空';
                        return;
                    }


                    $focus_luckdraw_winning_groupbuyinst_array = $focus_luckdraw_winning_groupbuyinsts;
                    if(!empty($focus_luckdraw_winning_groupbuyinst_array))
                    {
                        $collect_groupbuy_inst_ids = array();
                        foreach($focus_luckdraw_winning_groupbuyinst_array as $groupbuy_inst_id)
                        {
                            if(!empty($groupbuy_inst_id))
                            {
                                $collect_groupbuy_inst_ids[] = $groupbuy_inst_id;
                            }
                        }

                        //保存中奖结果
                        $data = array();
                        $data['focus_luckdraw_winning_no'] =  $focus_luckdraw_winning_no;
                        $data['is_focus_luckdraw_winning'] = 1;

                        $groupBuyingM = new GroupbuyingModel();
                        $where = array();
                        $where['id'] = array('in', $collect_groupbuy_inst_ids);
                        $groupBuyingM->where($where)->save($data);

                        //修改中奖者的订单状态
                        $groupbuyinst_list = $groupBuyingM->where($where)->select($data);
                        $need_change_order_data = array();
                        //找到用户uid
                        foreach($groupbuyinst_list as $groupbuy_inst_key=>$groupbuy_inst)
                        {
                            $partake_array = json_decode($groupbuy_inst['partake'],true);
                            if(empty($partake_array))
                            {
                                continue;
                            }
                            foreach($partake_array as $partakekey=>$uid)
                            {
                                if($focus_luckdraw_winning_no == $partakekey)
                                {
                                    $need_change_order_data[] = array(
                                        'groupbuy_inst_id'=>$groupbuy_inst['id'],
                                        'uid'=>$uid,
                                    );
                                }
                            }


                        }
//                        dump($need_change_order_data);exit;
                        //修改订单数据
                        $groubuyorderM = M('groupbuying_order');
                        $orderM = M('order');
                        $db_result = 0;
                        foreach($need_change_order_data as $ncod_key=>$ncod_value)
                        {
                            $groupbuyorder_where = array(
                                'uid'=>$ncod_value['uid'],
                                'groupbuying_id'=>$ncod_value['groupbuy_inst_id'],
                                'state'=>2,
                            );
                            $groupbuy_order_list = $groubuyorderM->where($groupbuyorder_where)->select();
                            dump($groupbuy_order_list);
                            if(!empty($groupbuy_order_list))
                            {
                                //修改数据
                                $groupbuy_order = $groupbuy_order_list[0];


                                $order_where=array(
                                    'order_name'=>$groupbuy_order['order_name'],
                                );
                                $data_order=array();
                                $data_order['operation_id'] = 10;
                                $db_result += $orderM->where($order_where)->save($data_order);
//            dump($db_result);echo $orderM->getLastSql();
//                                dump($db_result);exit;
                                /*$groupbuy_order_where=array(
                                    'id'=>$groupbuy_order['id'],
                                );
                                $data_groupbuy_order=array();
                                $data_groupbuy_order['state']=5;
                                $groubuyorderM->where($groupbuy_order_where)->save($data_groupbuy_order);*/
                            }
                        }

                        if($db_result){
                            $this->success('上传成功,修改订单数：'.$db_result.'条',U('GroupBuying/choujiangindex'));
                        }
                        else{
                            $this->error();
                        }
                    }
    }


} 