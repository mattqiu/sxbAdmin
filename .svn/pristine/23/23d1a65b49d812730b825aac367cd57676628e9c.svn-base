$(function () {    $("#p").change(function () {  //地区切换        var region_id = $("#p option:selected").val();        if (region_id == false) {            $("#city").html('<option value="">--市--</option>');            return false;        }        $.post("/Temp/get_region", {id: region_id, is_ajax: 'yes'}, function (result) {            var html = '';            $.each(result.data, function (key, value) {                html += '<option value="' + value.region_id + '">' + value.region_name + '</option>';            });            $("#city").removeClass("dnone");            $("#city").html(html);        }, 'json');    });    //更换验证码    //点击图片    $(".codeimg").on("click", function () {        $(".codeimg").attr("src", "/User/verify?" + new Date());    });    //点击旁边的文字    $(".changecode").on("click", function () {        $(".codeimg").attr("src", "/User/verify?" + new Date());    });});var dd = {    d: new Date(),    loadY: function (elm) {        var y = this.d.getFullYear();        var html = '';        for (var i = y - 60; i < y + 1; i++) {            if (i == y)                html += '<option value="' + i + '" selected="selected">' + i + '</option>';            else                html += '<option value="' + i + '">' + i + '</option>';        }        $('#' + elm).html(html);    },    loadM: function (elm) {        var html = '';        var m = this.d.getMonth();        for (var i = 1; i <= 12; i++) {            if (i == m)                html += '<option value="' + i + '" selected="selected">' + i + '</option>';            else                html += '<option value="' + i + '">' + i + '</option>';        }        $('#' + elm).html(html);    },    loadD: function (y1, m1, elm) {        var da = this.d.getDay();        var y = $("#" + y1 + " option:selected").val();        var m = $("#" + m1 + " option:selected").val();        var odd = /[1|3|5|7|8|10|12]/;        var even = /[4|6|9|11]/;        if (m.match(even) && m != 1 && m != 10 && m != 12)            maxD = 31;        else if (m.match(odd))            maxD = 32;        if (m == 2) {            if (y % 4 == 0)                maxD = 30;            else                maxD = 29;        }        var html = '';        for (var i = 1; i < maxD; i++) {            html += '<option value="' + i + '">' + i + '</option>';        }        $("#" + elm).html(html);    }};//检查是否存在特殊字符function chkUnChar(chkValue) {    var p = /[\'\=\!\#\$\%\^\&\*\(\)\+\-\\;\:\<\>\\\/\.\`]/;    if (chkValue.match(p)) {        return '请不要输入非法字符\n';    }    else {        return '';    }}/* *   地区切换 获取方式 ajax *   @param url       到服务器获取数据的链接 *   @param region_id 区域ID  可为国家、省份、地级市的ID *   @param elm       返回结果要载入到 哪个元素 */function changeRegion(region_id, elm) {    $.ajax({        url: '/Member/get_region',        dataType: 'json',        data: {id: region_id, is_ajax: 'yes'},        async: false,        success: function (result) {            var html = '';            $.each(result.data, function (key, value) {                html += '<option value="' + value.region_id + '">' + value.region_name + '</option><br/>';            });            $("#" + elm).html(html);        }    });}/*用户名、密码、验证码不能为空 * @param object frm 表单对象 *return string msg  返回的错误信息 */function checkUserPwdCode(frm, form_ame) {    if (frm == false)        frm = document.forms[form_ame];    var msg = '';    if (frm.elements['username'].value == false)        msg += '用户名不能为空 \n';    if (frm.elements['password'].value == false)        msg += '密码不能为空 \n';    if (frm.elements['code'].value == false)        msg += '验证码不能为空 \n';    return msg;}String.prototype.trim = function () {    return this.replace(/(^\s*)|(\s*$)/g, "");}/** * 跳转确认或者确定操作 */function confirmWarn(str, url) {    if (confirm(str)) {        location.href = url;    } else {        return;    }}function base64() {    // private property      _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";    // public method for encoding      this.encode = function (input) {        var output = "";        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;        var i = 0;        input = _utf8_encode(input);        while (i < input.length) {            chr1 = input.charCodeAt(i++);            chr2 = input.charCodeAt(i++);            chr3 = input.charCodeAt(i++);            enc1 = chr1 >> 2;            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);            enc4 = chr3 & 63;            if (isNaN(chr2)) {                enc3 = enc4 = 64;            } else if (isNaN(chr3)) {                enc4 = 64;            }            output = output +                _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +                _keyStr.charAt(enc3) + _keyStr.charAt(enc4);        }        return output;    }    // public method for decoding      this.decode = function (input) {        var output = "";        var chr1, chr2, chr3;        var enc1, enc2, enc3, enc4;        var i = 0;        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");        while (i < input.length) {            enc1 = _keyStr.indexOf(input.charAt(i++));            enc2 = _keyStr.indexOf(input.charAt(i++));            enc3 = _keyStr.indexOf(input.charAt(i++));            enc4 = _keyStr.indexOf(input.charAt(i++));            chr1 = (enc1 << 2) | (enc2 >> 4);            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);            chr3 = ((enc3 & 3) << 6) | enc4;            output = output + String.fromCharCode(chr1);            if (enc3 != 64) {                output = output + String.fromCharCode(chr2);            }            if (enc4 != 64) {                output = output + String.fromCharCode(chr3);            }        }        output = _utf8_decode(output);        return output;    }    // private method for UTF-8 encoding      _utf8_encode = function (string) {        string = string.replace(/\r\n/g, "\n");        var utftext = "";        for (var n = 0; n < string.length; n++) {            var c = string.charCodeAt(n);            if (c < 128) {                utftext += String.fromCharCode(c);            } else if ((c > 127) && (c < 2048)) {                utftext += String.fromCharCode((c >> 6) | 192);                utftext += String.fromCharCode((c & 63) | 128);            } else {                utftext += String.fromCharCode((c >> 12) | 224);                utftext += String.fromCharCode(((c >> 6) & 63) | 128);                utftext += String.fromCharCode((c & 63) | 128);            }        }        return utftext;    }    // private method for UTF-8 decoding      _utf8_decode = function (utftext) {        var string = "";        var i = 0;        var c = c1 = c2 = 0;        while (i < utftext.length) {            c = utftext.charCodeAt(i);            if (c < 128) {                string += String.fromCharCode(c);                i++;            } else if ((c > 191) && (c < 224)) {                c2 = utftext.charCodeAt(i + 1);                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));                i += 2;            } else {                c2 = utftext.charCodeAt(i + 1);                c3 = utftext.charCodeAt(i + 2);                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));                i += 3;            }        }        return string;    }}//检查输入框非空 var toCheck = {    checkFrom: '',    checkUsername: function () {        if (this.getValue('username') < 6)            return '用户名长度不够\n';        return '';    },    checkPassword: function () {        if (this.getValue('password') == false)            return '密码不能为空\n';        return '';    },    checkCode: function () {        if (this.getValue('code') == false)            return '验证码不能为空\n';        return '';    },    checkCh_Name: function () {        if (this.getValue('ch_name') == false)            return '中文名不能为空\n';        return '';    },    checkEn_name: function () {        if (this.getValue('en_name') == false)            return '英文名不能为空\n';        return '';    },    checkDesc: function () {        if (this.getValue('desc') == false)            return '自我描述不能为空\n';        return '';    },    checkPhone: function () {        if (this.getValue('phone') == false)            return '手机号码不能为空\n';        return '';    },    checkEmail: function () {        if (this.getValue('Email') == false)            return '邮箱地址不能为空\n';        return '';    },    checkContent: function () {        if (this.getValue('content') == false)            return '内容不能为空\n';        return '';    },    checkUserNote: function () {        if (this.getValue('user_note') == false)            return '会员备注不能为空\n';        return '';    },    checkNum: function () {        var num = this.getValue('num');        var p = /^\d+$/;        if (!(p.test(num)) || num < 1)            return '你输入的购买数量格式不正确\n';        return '';    },    getValue: function (elm) {        return this.checkFrom.elements[elm].value;    }};    